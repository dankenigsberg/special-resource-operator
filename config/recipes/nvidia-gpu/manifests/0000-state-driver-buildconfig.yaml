apiVersion: image.openshift.io/v1
kind: ImageStream
metadata:
  labels:
    app: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}
spec: {}
---
apiVersion: build.openshift.io/v1
kind: BuildConfig
metadata:
  labels:
    app: {{.SpecialResource.Name}}-{{.GroupName.DriverBuild}} 
  name: {{.SpecialResource.Name}}-{{.GroupName.DriverBuild}}
  annotations:
    specialresource.openshift.io/wait: "true"
    specialresource.openshift.io/driver-container-vendor: {{.SpecialResource.Spec.Node.Selector}}    
spec:
  nodeSelector:
    node-role.kubernetes.io/worker: ""
    {{.SpecialResource.Spec.Node.Selector}}: "true"
  runPolicy: "Serial"
  triggers:
    - type: "ConfigChange"
    - type: "ImageChange"
  source:
    git:
      ref: {{.SpecialResource.Spec.DriverContainer.Source.Git.Ref}}
      uri: {{.SpecialResource.Spec.DriverContainer.Source.Git.Uri}}
    contextDir: {{.OperatingSystemMajor}}
    type: Git
    dockerfile: | 
      FROM registry.access.redhat.com/ubi8:latest

      RUN yum install -y --releasever={{.OperatingSystemDecimal}} \
              ca-certificates \
              curl \
              gcc \
              glibc.i686 \
              make \
              cpio \
              kmod && \
          rm -rf /var/cache/yum/*

      RUN curl -fsSL -o /usr/local/bin/donkey https://github.com/3XX0/donkey/releases/download/v1.1.0/donkey && \
          curl -fsSL -o /usr/local/bin/extract-vmlinux https://raw.githubusercontent.com/torvalds/linux/master/scripts/extract-vmlinux && \
          chmod +x /usr/local/bin/donkey /usr/local/bin/extract-vmlinux

      #ARG BASE_URL=http://us.download.nvidia.com/XFree86/Linux-x86_64
      ARG BASE_URL=https://us.download.nvidia.com/tesla
      ARG DRIVER_VERSION=450.80.02
      ENV DRIVER_VERSION=$DRIVER_VERSION

      RUN ln -s /sbin/ldconfig /sbin/ldconfig.real
      # Install the userspace components and copy the kernel module sources.
      RUN cd /tmp && \
          curl -fSsl -O $BASE_URL/$DRIVER_VERSION/NVIDIA-Linux-x86_64-$DRIVER_VERSION.run && \
          sh NVIDIA-Linux-x86_64-$DRIVER_VERSION.run -x && \
          cd NVIDIA-Linux-x86_64-$DRIVER_VERSION && \
          ./nvidia-installer --silent \
                            --no-kernel-module \
                            --install-compat32-libs \
                            --no-nouveau-check \
                            --no-nvidia-modprobe \
                            --no-rpms \
                            --no-backup \
                            --no-check-for-alternate-installs \
                            --no-libglx-indirect \
                            --no-install-libglvnd \
                            --x-prefix=/tmp/null \
                            --x-module-path=/tmp/null \
                            --x-library-path=/tmp/null \
                            --x-sysconfig-path=/tmp/null && \
          mkdir -p /usr/src/nvidia-$DRIVER_VERSION && \
          mv LICENSE mkprecompiled kernel /usr/src/nvidia-$DRIVER_VERSION && \
          sed '9,${/^\(kernel\|LICENSE\)/!d}' .manifest > /usr/src/nvidia-$DRIVER_VERSION/.manifest && \
          rm -rf /tmp/*

      COPY nvidia-driver /usr/local/bin

      WORKDIR /usr/src/nvidia-$DRIVER_VERSION

      ARG PUBLIC_KEY=empty
      COPY ${PUBLIC_KEY} kernel/pubkey.x509

      ARG PRIVATE_KEY
      ARG KERNEL_VERSION=latest

      LABEL io.k8s.display-name="NVIDIA Driver Container"
      LABEL name="NVIDIA Driver Container"
      LABEL vendor="NVIDIA"
      LABEL version="${DRIVER_VERSION}"
      LABEL release="N/A"
      LABEL summary="Provision the NVIDIA driver through containers"
      LABEL description="See summary"

      COPY LICENSE /licenses/LICENSE
      COPY DRIVER-LICENSE /licenses/DRIVER-LICENSE

      ENTRYPOINT ["nvidia-driver", "init"]

  strategy:
    dockerStrategy:
      from:
        kind: "ImageStreamTag"
        name: "driver-container-base:v{{.KernelVersion}}"
        namespace: "driver-container-base"
      buildArgs:
        {{ range .SpecialResource.Spec.DriverContainer.BuildArgs }}
        - name: {{.Name}}
          value: {{.Value}}
        {{end}}
  output:
    to:
      kind: ImageStreamTag
      name: {{.SpecialResource.Name}}-{{.GroupName.DriverContainer}}:v{{.KernelVersion}}
